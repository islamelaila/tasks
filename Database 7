Write a query to display the names of employees and their department names using a natural join.

Write a query to list all orders with their corresponding customer names using a natural join.

Write a query to show student names and the courses they are enrolled in using a natural join.

Write a query to display project names and the employees working on them using a natural join.

Write a query to retrieve invoice details along with product names using a natural join.

Write a query to find all books with their respective author names using a natural join.

Write a query to list all class schedules along with their instructors’ names using a natural join.

Write a query to show supplier names and the products they supply using a natural join.

Write a query to display customer orders along with shipping details using a natural join.

Write a query to list employees along with their job titles using a natural join.



  sol ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


  

SELECT FIRST_NAME , LAST_NAME , DEPARTMENT_NAME FROM EMPLOYEES  NATURAL JOIN DEPARTMENTS ;

SELECT order_id, order_date, customer_name FROM orders NATURAL JOIN customers;

SELECT student_name, course_name FROM students NATURAL JOIN enrollments NATURAL JOIN courses;

SELECT project_name, employee_name FROM projects NATURAL JOIN project_assignments NATURAL JOIN employees;

SELECT invoice_id, product_name, quantity FROM invoices NATURAL JOIN invoice_items NATURAL JOIN products;

SELECT book_name, author_name FROM books NATURAL JOIN book_authors NATURAL JOIN authors;

SELECT schedule_time, instructor_name FROM schedules NATURAL JOIN class_assignments NATURAL JOIN instructors;

SELECT supplier_name, product_name FROM suppliers NATURAL JOIN supplier_products NATURAL JOIN products;

SELECT customer_order , shipping_details FROM orders  NATURAL JOIN shipping ;

SELECT employee_name , job_titles FROM employees  NATURAL JOIN jobs ;








->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>










Write a query to display employee names and department names by joining the employees and departments tables using the USING clause on department_id.

Write a query to list all orders and their corresponding customer names using the USING clause on customer_id.

Write a query to retrieve product names and supplier names from the products and suppliers tables using the USING clause on supplier_id.

Write a query to show student names and course titles by joining students and enrollments using the USING clause on student_id.

Write a query to display invoice numbers and product names by joining invoices and products using the USING clause on product_id.

Write a query to list project names and employee names using the USING clause on project_id.

Write a query to retrieve author names and book titles using the USING clause on author_id.

Write a query to show sales order details with employee names using the USING clause on employee_id.

Write a query to display course schedules and instructor names using the USING clause on instructor_id.

Write a query to list transactions along with account holder names using the USING clause on account_id.



  sol ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



SELECT FIRST_NAME , DEPARTMENT_NAME FROM EMPLOYEES e JOIN DEPARTMENTS d 
USING (department_id);

SELECT order_id, order_date, customer_name
FROM orders 
JOIN customers 
USING (customer_id);


SELECT product_name, supplier_name
FROM products 
JOIN suppliers 
USING (supplier_id);


SELECT student_name, course_title
FROM students 
JOIN enrollments 
USING (student_id)
JOIN courses 
USING (course_id);


SELECT invoice_number, product_name
FROM invoices 
JOIN products 
USING (product_id);
  


SELECT project_name, employee_name
FROM projects 
JOIN project_assignments 
USING (project_id)
JOIN employees 
USING (employee_id);



SELECT author_name, book_title
FROM authors 
JOIN books 
USING (author_id);



SELECT order_id, employee_name
FROM sales_orders 
JOIN employees 
USING (employee_id);



SELECT schedule_time, instructor_name
FROM schedules 
JOIN instructors 
USING (instructor_id);




SELECT transaction_id, account_holder_name
FROM transactions 
JOIN accounts 
USING (account_id);


->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




Write a query to retrieve employee names and their manager names from the employees table, handling ambiguous column names for employee_id and manager_id.

Write a query to list customer names and salesperson names from the customers and employees tables, where both tables have a column named name.

Write a query to display order IDs and product IDs from orders and order_details, both of which have an order_id column.

Write a query to retrieve student names and instructor names from students and instructors tables using an alias to handle the name column.

Write a query to show employee salaries and department budgets, both of which have a budget or salary column that could conflict.

Write a query to display project names and task names where both projects and tasks tables contain a name column.

Write a query to join courses and exams tables and retrieve their date fields, resolving ambiguity between the columns.

Write a query to show the product name and category name from the products and categories tables, where both have a name column.

Write a query to display the book title and publisher name from books and publishers, avoiding column name conflicts.

Write a query to list employee names and their department's location, resolving ambiguity in the location column from both tables.





  sol ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



SELECT e.first_name AS employee_name, m.first_name AS manager_name
FROM employees e
JOIN employees m ON e.manager_id = m.employee_id;



SELECT c.name AS customer_name, e.name AS salesperson_name
FROM customers c
JOIN employees e ON c.salesperson_id = e.employee_id;



SELECT o.order_id, od.product_id
FROM orders o
JOIN order_details od ON o.order_id = od.order_id;



SELECT s.name AS student_name, i.name AS instructor_name
FROM students s
JOIN instructors i ON s.instructor_id = i.instructor_id;



SELECT e.salary, d.budget
FROM employees e
JOIN departments d ON e.department_id = d.department_id;



SELECT p.name AS project_name, t.name AS task_name
FROM projects p
JOIN tasks t ON p.project_id = t.project_id;




SELECT c.course_name, c.start_date AS course_date, e.exam_date
FROM courses c
JOIN exams e ON c.course_id = e.course_id;




SELECT p.name AS product_name, c.name AS category_name
FROM products p
JOIN categories c ON p.category_id = c.category_id;



SELECT b.title AS book_title, p.name AS publisher_name
FROM books b
JOIN publishers p ON b.publisher_id = p.publisher_id;



SELECT e.first_name AS employee_name, d.location AS department_location
FROM employees e
JOIN departments d ON e.department_id = d.department_id;












->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>








💡 Oracle SQL – LEFT OUTER JOIN Coding Questions
Retrieve all employees and their department names.
Write an Oracle SQL query using LEFT OUTER JOIN to show all employees, including those who are not assigned to any department.

List all products and their associated categories.
Some products may not belong to any category. Write a query using LEFT JOIN to include all products regardless of category association.

Find all students and the courses they are enrolled in.
Use a LEFT OUTER JOIN to include students who are not enrolled in any course.

Display all orders with customer names, including orders without a matched customer.
Assume the orders table has a foreign key customer_id. Use LEFT JOIN to include all orders.

Show all departments and their managers.
Write a query to return all departments using a LEFT OUTER JOIN to show their assigned managers, including departments with no manager.

List all books and their authors from the books and authors tables.
Include books that don’t have an assigned author using a LEFT JOIN.

Write a query that retrieves all invoices along with their corresponding payment status.
Use LEFT JOIN to include invoices with no payment.

Get all employees and their projects from employees and projects_assigned tables.
Include employees who are not assigned to any project.





  sol ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



SELECT e.first_name, e.last_name, d.department_name
FROM employees e
LEFT JOIN departments d 
ON e.department_id = d.department_id;


SELECT p.product_name, c.category_name
FROM products p
LEFT JOIN categories c 
ON p.category_id = c.category_id;



SELECT s.student_name, c.course_name
FROM students s
LEFT JOIN enrollments e ON s.student_id = e.student_id
LEFT JOIN courses c ON e.course_id = c.course_id;





SELECT o.order_id, o.order_date, c.customer_name
FROM orders o
LEFT JOIN customers c 
ON o.customer_id = c.customer_id;



SELECT d.department_name, e.first_name AS manager_first_name, e.last_name AS manager_last_name
FROM departments d
LEFT JOIN employees e 
ON d.manager_id = e.employee_id;



SELECT b.book_title, a.author_name
FROM books b
LEFT JOIN authors a 
ON b.author_id = a.author_id;



SELECT i.invoice_id, i.invoice_date, p.payment_status
FROM invoices i
LEFT JOIN payments p 
ON i.invoice_id = p.invoice_id;




SELECT e.first_name, e.last_name, p.project_name
FROM employees e
LEFT JOIN projects_assigned pa ON e.employee_id = pa.employee_id
LEFT JOIN projects p ON pa.project_id = p.project_id;


->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


💡 Oracle SQL – RIGHT OUTER JOIN Coding Questions
List all departments and the employees working in them.
Use a RIGHT OUTER JOIN to ensure all departments are shown, even if they have no employees.

Retrieve all orders and their corresponding customers.
Use a RIGHT JOIN to include all customers, even if they haven't placed any orders.

Show all courses and enrolled students.
Use RIGHT JOIN to return all courses, including those without any enrolled students.

Display all projects and the employees assigned to them.
Use a RIGHT OUTER JOIN to include all projects even if no employee is assigned.

Write a query to show all payment methods and their related transactions.
Include payment methods with no transactions using RIGHT JOIN.

Find all authors and their books.
Use a RIGHT OUTER JOIN to list all authors, even those who haven't written any books.

List all categories and the products under them.
Use a RIGHT JOIN to ensure all categories are shown, even those with no products.

Retrieve all students and their assigned dorm rooms.
Use a RIGHT OUTER JOIN to include dorm rooms even if they are unassigned.



  sol ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



SELECT d.department_name, e.first_name, e.last_name
FROM employees e
RIGHT JOIN departments d
ON e.department_id = d.department_id;

SELECT o.order_id, o.order_date, c.customer_name
FROM orders o
RIGHT JOIN customers c
ON o.customer_id = c.customer_id;

SELECT c.course_name, s.student_name
FROM students s
RIGHT JOIN enrollments e ON s.student_id = e.student_id
RIGHT JOIN courses c ON e.course_id = c.course_id;

SELECT p.project_name, e.first_name, e.last_name
FROM employees e
RIGHT JOIN projects_assigned pa ON e.employee_id = pa.employee_id
RIGHT JOIN projects p ON pa.project_id = p.project_id;

SELECT pm.method_name, t.transaction_id, t.amount
FROM transactions t
RIGHT JOIN payment_methods pm
ON t.method_id = pm.method_id;

SELECT a.author_name, b.book_title
FROM books b
RIGHT JOIN authors a
ON b.author_id = a.author_id;

SELECT c.category_name, p.product_name
FROM products p
RIGHT JOIN categories c
ON p.category_id = c.category_id;

SELECT d.dorm_room, s.student_name
FROM students s
RIGHT JOIN dorms d
ON s.dorm_id = d.dorm_id;


->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

💡 Oracle SQL – FULL OUTER JOIN Coding Questions
Write a query to list all customers and all orders.
Use a FULL OUTER JOIN to include customers with no orders and orders with no matching customer.

Display all employees and all projects.
Some employees may not be assigned to any project, and some projects may not have any employee. Use a FULL OUTER JOIN.

Show all products and all suppliers.
Include products without suppliers and suppliers without products using FULL OUTER JOIN.

List all students and all courses.
Write a FULL OUTER JOIN query to include students not enrolled in any course and courses with no students.

Retrieve all authors and all books.
Include authors with no books and books without an assigned author using FULL OUTER JOIN.

Write a query to find all employees and all departments.
Include employees not assigned to any department and departments with no employees.

Show all transactions and all payment methods.
Include unmatched records from both sides using a FULL OUTER JOIN.

Combine two customer lists from two different regions.
Use FULL OUTER JOIN to include all customers from both regions, even if they don’t exist in both lists.


  sol ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



SELECT c.customer_name, o.order_id, o.order_date
FROM customers c
FULL OUTER JOIN orders o
ON c.customer_id = o.customer_id;

SELECT e.first_name, e.last_name, p.project_name
FROM employees e
FULL OUTER JOIN projects_assigned pa ON e.employee_id = pa.employee_id
FULL OUTER JOIN projects p ON pa.project_id = p.project_id;

SELECT p.product_name, s.supplier_name
FROM products p
FULL OUTER JOIN suppliers s
ON p.supplier_id = s.supplier_id;

SELECT s.student_name, c.course_name
FROM students s
FULL OUTER JOIN enrollments e ON s.student_id = e.student_id
FULL OUTER JOIN courses c ON e.course_id = c.course_id;

SELECT a.author_name, b.book_title
FROM authors a
FULL OUTER JOIN books b
ON a.author_id = b.author_id;

SELECT e.first_name, e.last_name, d.department_name
FROM employees e
FULL OUTER JOIN departments d
ON e.department_id = d.department_id;

SELECT t.transaction_id, t.amount, pm.method_name
FROM transactions t
FULL OUTER JOIN payment_methods pm
ON t.method_id = pm.method_id;

SELECT r1.customer_name AS region1_customer, r2.customer_name AS region2_customer
FROM customers_region1 r1
FULL OUTER JOIN customers_region2 r2
ON r1.customer_id = r2.customer_id;



->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



