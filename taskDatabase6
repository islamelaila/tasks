1. CHECK Constraint (Code Samples)
Create a table Employees with a CHECK constraint that ensures age is greater than or equal to 18.

Write a SQL query to enforce that salary in a Staff table must be between 3000 and 10000.

Add a CHECK constraint to an existing table Products that ensures price is greater than 0.

Create a table Students where the grade column only allows values from A to F using a CHECK constraint.



CREATE TABLE Employees (
    emp_id   NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50),
    age      NUMBER,
    CONSTRAINT chk_emp_age CHECK (age >= 18)
);


CREATE TABLE Staff (
    staff_id   NUMBER PRIMARY KEY,
    staff_name VARCHAR2(50),
    salary     NUMBER,
    CONSTRAINT chk_staff_salary CHECK (salary BETWEEN 3000 AND 10000)
);


ALTER TABLE Products
ADD CONSTRAINT chk_product_price CHECK (price > 0);


CREATE TABLE Students (
    student_id   NUMBER PRIMARY KEY,
    student_name VARCHAR2(50),
    grade        CHAR(1),
    CONSTRAINT chk_grade CHECK (grade IN ('A','B','C','D','E','F'))
);


->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


2. Adding Constraints via ALTER TABLE (Code Samples)
Add a NOT NULL constraint to the email column in the Customers table.

Add a UNIQUE constraint to the username column in the Users table.

Add a FOREIGN KEY constraint on Orders.customer_id referencing Customers(id).

Use ALTER TABLE to add a CHECK constraint to the Accounts table to ensure balance >= 0.

Add a PRIMARY KEY constraint to the Departments table on the dept_id column.



ALTER TABLE Customers
MODIFY email VARCHAR2(100) NOT NULL;


ALTER TABLE Users
ADD CONSTRAINT uq_username UNIQUE (username);



ALTER TABLE Orders
ADD CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id)
REFERENCES Customers(id);


ALTER TABLE Accounts
ADD CONSTRAINT chk_balance CHECK (balance >= 0);



ALTER TABLE Departments
ADD CONSTRAINT pk_dept PRIMARY KEY (dept_id);



->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


 3. Dropping (Removing) Constraints (Code Samples)
Drop a CHECK constraint named chk_salary from the Employees table.

Remove the UNIQUE constraint on email from the Users table.

Drop the PRIMARY KEY from the Products table.

Drop a FOREIGN KEY constraint named fk_order_customer from the Orders table.

Write SQL to remove a NOT NULL constraint from the phone column in the Contacts table.





ALTER TABLE Employees
DROP CONSTRAINT chk_salary;



ALTER TABLE Users
DROP CONSTRAINT uq_email;



ALTER TABLE Products
DROP PRIMARY KEY;



ALTER TABLE Orders
DROP CONSTRAINT fk_order_customer;



ALTER TABLE Contacts
MODIFY phone VARCHAR2(20) NULL;




->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



4. Renaming Constraints (Code Samples)
Rename a CHECK constraint named chk_age to check_min_age on the Students table.

Rename a FOREIGN KEY constraint fk_emp_dept to fk_employee_department on the Employees table.

Rename the PRIMARY KEY constraint on the Users table to pk_users_id.

Write SQL to rename the UNIQUE constraint on the username column to uk_user_name.

Provide the syntax to rename a constraint in SQL Server vs PostgreSQL.





ALTER TABLE Students
RENAME CONSTRAINT chk_age TO check_min_age;


ALTER TABLE Employees
RENAME CONSTRAINT fk_emp_dept TO fk_employee_department;


ALTER TABLE Users
RENAME CONSTRAINT SYS_C001234 TO pk_users_id;


ALTER TABLE Users
RENAME CONSTRAINT uq_username TO uk_user_name;


ALTER TABLE Students RENAME CONSTRAINT chk_age TO check_min_age;
ALTER TABLE Employees RENAME CONSTRAINT fk_emp_dept TO fk_employee_department;
ALTER TABLE Users RENAME CONSTRAINT users_pkey TO pk_users_id;
ALTER TABLE Users RENAME CONSTRAINT uq_username TO uk_user_name;



->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



5. Disabling Constraints (Code Samples)
Disable a FOREIGN KEY constraint named fk_customer_order on the Orders table.

Temporarily disable all constraints on the Products table.

Write SQL to disable the CHECK constraint on the Accounts.balance column.

Disable the PRIMARY KEY constraint on Departments(dept_id).

How would you disable all constraints on a table before bulk inserting data?





ALTER TABLE Orders
DISABLE CONSTRAINT fk_customer_order;



ALTER TABLE Products DISABLE ALL CONSTRAINTS;



ALTER TABLE Accounts
DISABLE CONSTRAINT chk_balance;


ALTER TABLE Departments
DISABLE PRIMARY KEY;

ALTER TABLE Products DISABLE ALL CONSTRAINTS;

ALTER TABLE Products ENABLE ALL CONSTRAINTS;



->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




6. Enabling Constraints (Code Samples)
Enable the FOREIGN KEY constraint fk_customer_order on the Orders table.

Re-enable all constraints on the Products table after a data load.

Write SQL to enable a CHECK constraint on salary in the Staff table.

Enable the PRIMARY KEY constraint on Departments(dept_id) after it was disabled.

How do you enable a constraint only if it's currently disabled?







ALTER TABLE Orders
ENABLE CONSTRAINT fk_customer_order;


ALTER TABLE Products ENABLE ALL CONSTRAINTS;


ALTER TABLE Staff
ENABLE CONSTRAINT chk_salary;


ALTER TABLE Departments
ENABLE PRIMARY KEY;



DECLARE
   status VARCHAR2(8);
BEGIN
   SELECT status INTO v_status
   FROM user_constraints
   WHERE table_name = 'STAFF'
     AND constraint_name = 'CHK_SALARY';

   IF status = 'DISABLED' THEN  EXECUTE IMMEDIATE 'ALTER TABLE Staff ENABLE CONSTRAINT chk_salary';
   END IF;
END;
/


